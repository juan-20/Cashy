{"ast":null,"code":"import { useContext, useEffect } from 'react';\nimport { useMotionValue } from 'framer-motion';\nimport ModelsContext from './ModelsContext';\nexport default function useWrapperScroll() {\n  const {\n    wrapperRef\n  } = useContext(ModelsContext);\n  const scrollY = useMotionValue(0);\n  const scrollYProgress = useMotionValue(0);\n  useEffect(() => {\n    if (wrapperRef.current) {\n      const updateScrollValue = () => {\n        if (wrapperRef.current) {\n          const {\n            scrollTop,\n            scrollHeight,\n            offsetHeight\n          } = wrapperRef.current;\n          const fullScroll = scrollHeight - offsetHeight;\n          scrollY.set(scrollTop);\n          scrollYProgress.set(scrollTop / fullScroll);\n        }\n      };\n\n      wrapperRef.current.addEventListener('scroll', updateScrollValue);\n      return () => {\n        var _wrapperRef$current;\n\n        return wrapperRef === null || wrapperRef === void 0 ? void 0 : (_wrapperRef$current = wrapperRef.current) === null || _wrapperRef$current === void 0 ? void 0 : _wrapperRef$current.removeEventListener('scroll', updateScrollValue);\n      };\n    }\n  }, [wrapperRef, scrollY, scrollYProgress]);\n  return {\n    scrollY,\n    scrollYProgress\n  };\n}","map":{"version":3,"sources":["C:/Programas/NLW3/web/src/components/dashboard/Model/useWrapperScroll.ts"],"names":["useContext","useEffect","useMotionValue","ModelsContext","useWrapperScroll","wrapperRef","scrollY","scrollYProgress","current","updateScrollValue","scrollTop","scrollHeight","offsetHeight","fullScroll","set","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,eAAe,SAASC,gBAAT,GAA4B;AACzC,QAAM;AAAEC,IAAAA;AAAF,MAAiBL,UAAU,CAACG,aAAD,CAAjC;AAEA,QAAMG,OAAO,GAAGJ,cAAc,CAAC,CAAD,CAA9B;AACA,QAAMK,eAAe,GAAGL,cAAc,CAAC,CAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,UAAU,CAACG,OAAf,EAAwB;AACtB,YAAMC,iBAAiB,GAAG,MAAM;AAC9B,YAAIJ,UAAU,CAACG,OAAf,EAAwB;AACtB,gBAAM;AAAEE,YAAAA,SAAF;AAAaC,YAAAA,YAAb;AAA2BC,YAAAA;AAA3B,cAA4CP,UAAU,CAACG,OAA7D;AAEA,gBAAMK,UAAU,GAAGF,YAAY,GAAGC,YAAlC;AAEAN,UAAAA,OAAO,CAACQ,GAAR,CAAYJ,SAAZ;AACAH,UAAAA,eAAe,CAACO,GAAhB,CAAoBJ,SAAS,GAAGG,UAAhC;AACD;AACF,OATD;;AAWAR,MAAAA,UAAU,CAACG,OAAX,CAAmBO,gBAAnB,CAAoC,QAApC,EAA8CN,iBAA9C;AAEA,aAAO;AAAA;;AAAA,eACLJ,UADK,aACLA,UADK,8CACLA,UAAU,CAAEG,OADP,wDACL,oBAAqBQ,mBAArB,CAAyC,QAAzC,EAAmDP,iBAAnD,CADK;AAAA,OAAP;AAED;AACF,GAlBQ,EAkBN,CAACJ,UAAD,EAAaC,OAAb,EAAsBC,eAAtB,CAlBM,CAAT;AAoBA,SAAO;AAAED,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAP;AACD","sourcesContent":["import { useContext, useEffect } from 'react'\nimport { useMotionValue } from 'framer-motion'\n\nimport ModelsContext from './ModelsContext'\n\nexport default function useWrapperScroll() {\n  const { wrapperRef } = useContext(ModelsContext)\n\n  const scrollY = useMotionValue(0)\n  const scrollYProgress = useMotionValue(0)\n\n  useEffect(() => {\n    if (wrapperRef.current) {\n      const updateScrollValue = () => {\n        if (wrapperRef.current) {\n          const { scrollTop, scrollHeight, offsetHeight } = wrapperRef.current\n\n          const fullScroll = scrollHeight - offsetHeight\n\n          scrollY.set(scrollTop)\n          scrollYProgress.set(scrollTop / fullScroll)\n        }\n      }\n\n      wrapperRef.current.addEventListener('scroll', updateScrollValue)\n\n      return () =>\n        wrapperRef?.current?.removeEventListener('scroll', updateScrollValue)\n    }\n  }, [wrapperRef, scrollY, scrollYProgress])\n\n  return { scrollY, scrollYProgress }\n}\n"]},"metadata":{},"sourceType":"module"}